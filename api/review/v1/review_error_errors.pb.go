// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 评价创建失败
func IsReviewCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_CREATE_FAILED.String() && e.Code == 400
}

// 评价创建失败
func ErrorReviewCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REVIEW_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 评价不存在
func IsReviewNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_NOT_FOUND.String() && e.Code == 404
}

// 评价不存在
func ErrorReviewNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_REVIEW_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 评价已存在
func IsReviewAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_ALREADY_EXISTS.String() && e.Code == 400
}

// 评价已存在
func ErrorReviewAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REVIEW_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 评价参数无效
func IsReviewInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_INVALID_PARAMS.String() && e.Code == 400
}

// 评价参数无效
func ErrorReviewInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REVIEW_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 评价内部错误
func IsReviewInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_INTERNAL_ERROR.String() && e.Code == 500
}

// 评价内部错误
func ErrorReviewInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REVIEW_INTERNAL_ERROR.String(), fmt.Sprintf(format, args...))
}
